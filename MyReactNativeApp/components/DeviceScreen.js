import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  ActivityIndicator,
  Alert,
  TouchableOpacity,
  TextInput,
  ScrollView,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import APIs, { authApis, endpoints } from '../configs/APIs';
import SensorData from './devices/SensorData';

const DeviceScreen = () => {
  // Khai b√°o state
  const [devices, setDevices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [relayStates, setRelayStates] = useState({});
  const [defaultTemps, setDefaultTemps] = useState({});
  const [selectedDevice, setSelectedDevice] = useState(null);
  const [defaultTempInput, setDefaultTempInput] = useState('');

  // H√†m t·∫£i thi·∫øt b·ªã t·ª´ API
  const loadDevices = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const res = await authApis(token).get(endpoints['my-devices']);
      setDevices(res.data);

      // Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu cho c√°c thi·∫øt b·ªã
      const initialRelayStates = {};
      const initialDefaultTemps = {};
      res.data.forEach(device => {
        initialRelayStates[device.deviceCode] = false;
        initialDefaultTemps[device.deviceCode] = null;
      });

      setRelayStates(initialRelayStates);
      setDefaultTemps(initialDefaultTemps);
    } catch (err) {
      console.error(err);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch thi·∫øt b·ªã');
    } finally {
      setLoading(false);
    }
  };

  // H√†m ƒëi·ªÅu khi·ªÉn relay
  const handleRelayControl = async (deviceCode, isOn) => {
    try {
      const token = await AsyncStorage.getItem('token');
      const endpoint = isOn
        ? endpoints['relay-on'](deviceCode)
        : endpoints['relay-off'](deviceCode);

      await authApis(token).post(endpoint);
      setRelayStates(prev => ({ ...prev, [deviceCode]: isOn }));
      Alert.alert('Th√†nh c√¥ng', `ƒê√£ ${isOn ? 'b·∫≠t' : 't·∫Øt'} relay c·ªßa thi·∫øt b·ªã ${deviceCode}`);
    } catch (err) {
      console.error(err);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ƒëi·ªÅu khi·ªÉn relay. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // H√†m ƒë·∫∑t nhi·ªát ƒë·ªô m·∫∑c ƒë·ªãnh
  const handleSetDefaultTemperature = async (deviceCode) => {
    const temp = parseFloat(defaultTempInput);
    if (isNaN(temp) || temp < 0 || temp > 100) {
      Alert.alert('L·ªói', 'Nhi·ªát ƒë·ªô ph·∫£i t·ª´ 0 ƒë·∫øn 100¬∞C');
      return;
    }
    try {
      const token = await AsyncStorage.getItem('token');
      await authApis(token).post(
        endpoints['set-default-temperature'](deviceCode),
        {},
        { params: { temperature: temp } }
      );
      setDefaultTemps(prev => ({ ...prev, [deviceCode]: temp }));
      Alert.alert('Th√†nh c√¥ng', `ƒê√£ ƒë·∫∑t nhi·ªát ƒë·ªô m·∫∑c ƒë·ªãnh ${temp}¬∞C cho thi·∫øt b·ªã ${deviceCode}`);
      setDefaultTempInput('');
    } catch (err) {
      console.error(err);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ƒë·∫∑t nhi·ªát ƒë·ªô m·∫∑c ƒë·ªãnh');
    }
  };

  // T·∫£i danh s√°ch thi·∫øt b·ªã khi component mount
  useEffect(() => {
    loadDevices();
  }, []);

  // Render t·ª´ng thi·∫øt b·ªã
  const renderItem = ({ item }) => {
    const isSelected = selectedDevice === item.deviceCode;
    const defaultTemp = defaultTemps[item.deviceCode];

    return (
      <TouchableOpacity
        onPress={() => setSelectedDevice(item.deviceCode)}
        activeOpacity={0.9}
        className={`
          bg-white rounded-3xl p-6 mb-4
          ${isSelected ? 'border-2 border-primary-500' : 'border border-gray-200'}
          shadow-md
        `}
      >
        {/* Header */}
        <View className="flex-row justify-between mb-4 items-center">
          <View className="flex-row items-center">
            <View className="w-12 h-12 rounded-2xl bg-gradient-to-br from-primary-500 to-primary-600 mr-3 items-center justify-center shadow-lg">
              <Text className="text-white text-2xl">üì±</Text>
            </View>
            <View>
              <Text className="text-lg font-bold text-secondary-800">
                {item.deviceName || '(Kh√¥ng c√≥ t√™n)'}
              </Text>
              <Text className="text-sm text-secondary-500">
                M√£: {item.deviceCode}
              </Text>
            </View>
          </View>
        </View>

        {/* Sensor Data */}
        <SensorData
          deviceCode={item.deviceCode}
          sensorData={null} // D·ªØ li·ªáu c·∫£m bi·∫øn ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü trang SensorData
        />

        {/* Temperature Input & Button */}
        <View className="bg-secondary-100 rounded-2xl p-4 mb-4">
          <Text className="text-secondary-700 font-semibold mb-3">
            C√†i ƒë·∫∑t nhi·ªát ƒë·ªô m·∫∑c ƒë·ªãnh
          </Text>
          <View className="flex-row space-x-3">
            <TextInput
              className="flex-1 bg-white border border-secondary-300 rounded-xl px-4 py-3 text-secondary-800"
              placeholder="Nhi·ªát ƒë·ªô (¬∞C)"
              placeholderTextColor="#94a3b8"
              keyboardType="numeric"
              value={defaultTempInput}
              onChangeText={setDefaultTempInput}
            />
            <TouchableOpacity
              className="bg-primary-500 rounded-xl px-6 py-3 items-center justify-center shadow-md"
              onPress={() => handleSetDefaultTemperature(item.deviceCode)}
              activeOpacity={0.8}
            >
              <Text className="text-white font-semibold">ƒê·∫∑t</Text>
            </TouchableOpacity>
          </View>
          {defaultTemp && (
            <Text className="text-secondary-600 mt-2">
              Nhi·ªát ƒë·ªô m·∫∑c ƒë·ªãnh hi·ªán t·∫°i: {defaultTemp}¬∞C
            </Text>
          )}
        </View>

        {/* Relay Controls */}
        <View className="flex-row space-x-3">
          <TouchableOpacity
            onPress={() => handleRelayControl(item.deviceCode, true)}
            className="flex-1 rounded-2xl py-4 items-center bg-green-500 shadow-lg"
            activeOpacity={0.8}
          >
            <Text className="text-white font-bold">B·∫≠t Qu·∫°t</Text>
          </TouchableOpacity>
          <TouchableOpacity
            onPress={() => handleRelayControl(item.deviceCode, false)}
            className="flex-1 rounded-2xl py-4 items-center bg-red-500 shadow-lg"
            activeOpacity={0.8}
          >
            <Text className="text-white font-bold">T·∫Øt Qu·∫°t</Text>
          </TouchableOpacity>
        </View>
      </TouchableOpacity>
    );
  };

  if (loading) {
    return (
      <View className="flex-1 justify-center items-center bg-primary-50">
        <View className="bg-white rounded-3xl p-8 shadow-lg items-center">
          <ActivityIndicator size="large" color="#3b82f6" />
          <Text className="text-secondary-600 font-medium mt-4">ƒêang t·∫£i thi·∫øt b·ªã...</Text>
        </View>
      </View>
    );
  }

  return (
    <View className="flex-1 bg-primary-50">
      <ScrollView
        contentContainerStyle={{ padding: 16 }}
        showsVerticalScrollIndicator={false}
      >
        <View className="mb-6">
          <Text className="text-2xl font-bold text-secondary-800 mb-2">
            Thi·∫øt b·ªã c·ªßa b·∫°n
          </Text>
          <Text className="text-secondary-600">
            Qu·∫£n l√Ω v√† ƒëi·ªÅu khi·ªÉn c√°c thi·∫øt b·ªã c·∫£m bi·∫øn
          </Text>
        </View>

        <FlatList
          data={devices}
          keyExtractor={(item) => item.deviceId.toString()}
          renderItem={renderItem}
          scrollEnabled={false}
          ListEmptyComponent={
            <View className="bg-white rounded-3xl p-8 items-center shadow-md">
              <Text className="text-6xl mb-4">üì±</Text>
              <Text className="text-secondary-800 text-lg font-semibold mb-2">
                Ch∆∞a c√≥ thi·∫øt b·ªã n√†o
              </Text>
              <Text className="text-secondary-500 text-center">
                B·∫°n ch∆∞a c√≥ thi·∫øt b·ªã n√†o ƒë∆∞·ª£c k·∫øt n·ªëi.
              </Text>
            </View>
          }
        />
      </ScrollView>
    </View>
  );
};

export default DeviceScreen;