import React, { useState } from "react";
import AddEditProductModal from "../components/AddEditProductModal";
import "./Products.css";
import { useProducts } from "../hooks/useProducts";

const Products = ({ products, addProduct, updateProduct, deleteProduct }) => {
  // State cho t√¨m ki·∫øm, danh m·ª•c, modal v√† ch·ªânh s·ª≠a
  const [search, setSearch] = useState("");
  const [category, setCategory] = useState("all");
  const [unit, setUnit] = useState("all");
  const [sortOrder, setSortOrder] = useState("none"); // none | asc | desc
  const [showModal, setShowModal] = useState(false);
  const [editProduct, setEditProduct] = useState(null);
  const { categories = [] } = useProducts();
  const { units = [] } = useProducts();
  //Ch·ªânh ng√†y
  const parseDate = (d) => {
    if (typeof d === "string" && d.includes("/")) {
      const [day, month, year] = d.split("/");
      return new Date(`${year}-${month}-${day}`);
    }
    return new Date(d);
  };

  // L·ªçc s·∫£n ph·∫©m theo danh m·ª•c v√† t·ª´ kho√° t√¨m ki·∫øm
  const filtered = products
    .filter((p) => {
      const matchCat = category === "all" || p.category?.categoryName === category;
      const matchUni = unit === "all" || p.unit?.unitName === unit;
      const matchSearch = p.productName?.toLowerCase().includes(search.toLowerCase());
      return matchUni && matchCat && matchSearch;
    })
    .sort((a, b) => {
      // 1Ô∏è‚É£ ∆Øu ti√™n s·∫£n ph·∫©m c√≤n h√†ng
      if (a.quantity === 0 && b.quantity !== 0) return 1;
      if (a.quantity !== 0 && b.quantity === 0) return -1;

      // 2Ô∏è‚É£ Sau ƒë√≥ s·∫Øp x·∫øp theo h·∫°n s·ª≠ d·ª•ng n·∫øu c·∫ßn
      const dateA = parseDate(a.expiryDate);
      const dateB = parseDate(b.expiryDate);

      if (sortOrder === "asc") return dateA - dateB;
      if (sortOrder === "desc") return dateB - dateA;

      return 0; // kh√¥ng s·∫Øp x·∫øp theo ng√†y
    });

  // G·ªôp s·∫£n ph·∫©m theo t√™n (n·∫øu c·∫ßn d√πng)
  const groupedProducts = filtered.reduce((acc, p) => {
    if (!acc[p.productName]) acc[p.productName] = [];
    acc[p.productName].push(p);
    return acc;
  }, {});

  // Hi·ªÉn th·ªã form th√™m m·ªõi
  const handleAdd = () => {
    setEditProduct(null);
    setShowModal(true);
  };

  // Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
  const handleEdit = (product) => {
    setEditProduct(product);
    setShowModal(true);
  };

  // L∆∞u s·∫£n ph·∫©m sau khi th√™m ho·∫∑c s·ª≠a
  const handleSave = (productData) => {
    if (editProduct && editProduct.productId) {
      updateProduct(productData);
    } else {
      addProduct(productData);
    }
    setShowModal(false);
  };
  //T√≠nh ng√†y
  const getDaysToExpire = (dateStr) => {
    let expiry;
    if (dateStr.includes('/')) {
      const [day, month, year] = dateStr.split('/');
      expiry = new Date(`${year}-${month}-${day}`);
    } else {
      expiry = new Date(dateStr); // ƒë·ªãnh d·∫°ng yyyy-mm-dd
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0); // so s√°nh ch√≠nh x√°c ng√†y

    const diffTime = expiry.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return diffDays;
  };

  return (
    <div className="products-page">
      {/* Ti√™u ƒë·ªÅ v√† n√∫t th√™m */}
      <div className="products-header">
        <h2>üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m</h2>
        <button onClick={handleAdd} className="add-button">
          + Th√™m s·∫£n ph·∫©m
        </button>
      </div>

      {/* B·ªô l·ªçc t√¨m ki·∫øm v√† danh m·ª•c */}
      <div className="filters">
        <input
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="üîç T√¨m s·∫£n ph·∫©m..."
        />
        <select value={category} onChange={(e) => setCategory(e.target.value)}>
          <option value="all">T·∫•t c·∫£ lo·∫°i</option>
          {categories.map((c) => (
            <option key={c.categoryId} value={c.categoryName}>
              {c.categoryName}
            </option>
          ))}
        </select>
        <select value={unit} onChange={(e) => setUnit(e.target.value)}>
          <option value="all">T·∫•t c·∫£ ƒë∆°n v·ªã</option>
          {units.map((u) => (
            <option key={u.unitId} value={u.unitName}>
              {u.unitName}
            </option>
          ))}
        </select>
        {/* S·∫Øp x·∫øp theo h·∫°n s·ª≠ d·ª•ng */}
        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
          <option value="none">S·∫Øp x·∫øp theo h·∫°n s·ª≠ d·ª•ng</option>
          <option value="asc">TƒÉng d·∫ßn</option>
          <option value="desc">Gi·∫£m d·∫ßn</option>
        </select>
      </div>

      {/* B·∫£ng danh s√°ch s·∫£n ph·∫©m */}
      <table className="product-table">
        <thead>
          <tr className="title">
            <th>·∫¢nh</th>
            <th>T√™n</th>
            <th>Lo·∫°i</th>
            <th>Tr·∫°ng th√°i</th>
            <th>H·∫°n s·ª≠ d·ª•ng</th>
            <th>Ng√†y nh·∫≠p</th>
            <th>ƒê∆°n v·ªã</th>
            <th>S·ªë l∆∞·ª£ng</th>
            <th>Ghi ch√∫</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {filtered.length === 0 ? (
            <tr>
              <td colSpan="10" className="no-results">
                Kh√¥ng c√≥ s·∫£n ph·∫©m.
              </td>
            </tr>
          ) : (
            filtered.map((p) => (
              <tr key={p.productId}>
                <td>
                  <img src={p.image} alt={p.name} width="50" height="50" />
                </td>
                <td>{p.productName}</td>
                <td>
                  {p.category?.categoryName || "Ch∆∞a ph√¢n lo·∫°i"}
                </td>
                <td className={p.quantity <= 0 ? "not-active" : "active"}>
                  <span className={p.status === 'notExpired' ? "notExpired" : "Expired"}>
                    {p.quantity <= 0
                      ? ``
                      : p.status === 'notExpired'
                        ? `H·∫°n: ${getDaysToExpire(p.expiryDate)} ng√†y`
                        : "H·∫øt h·∫°n"}
                  </span>
                </td>
                <td>{p.expiryDate}</td>
                <td>{p.detectedAt}</td>
                <td>{p.unit?.unitName || "Kh√¥ng r√µ"}</td>
                <td>{p.quantity}</td>
                <td className="note">{p.notes}</td>
                <td>
                  <button className="edit-btn" onClick={() => handleEdit(p)}>
                    S·ª≠a
                  </button>
                  <button className="delete-btn" onClick={() => deleteProduct(p.productId || p.id)}>
                    Xo√°
                  </button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      {/* Modal th√™m/s·ª≠a s·∫£n ph·∫©m */}
      <AddEditProductModal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onSave={handleSave}
        initialData={editProduct}
      />
    </div>
  );
};

export default Products;
