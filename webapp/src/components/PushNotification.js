import { useEffect } from "react";
import { messaging } from "../configs/firebase";
import { getToken, onMessage } from "firebase/messaging";

const PushNotification = () => {
  useEffect(() => {
    const requestPermission = async () => {
      try {
        const permission = await Notification.requestPermission();
        if (permission === "granted") {
          console.log("‚úÖ Notification permission granted.");

          // L·∫•y FCM token c·ªßa client
          const token = await getToken(messaging, {
            vapidKey: "BD8QXIpDEH6TZ0NM1r-bCpz85-H_4QRJs4npTMH4HWzynFn0yQ7-mGH1ydcZlDGDP-050LHuozYX98DmXNWOZR0", // l·∫•y t·ª´ Firebase Console
          });

          if (token) {
            console.log("üì≤ FCM Token:", token);
            // G·ª≠i token n√†y v·ªÅ backend n·∫øu c·∫ßn ƒë·ªÉ g·ª≠i th√¥ng b√°o t·ª´ server
          } else {
            console.warn("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c FCM token.");
          }
        } else {
          console.warn("‚ùå Notification permission denied.");
        }
      } catch (error) {
        console.error("üî• Error getting permission or token:", error);
      }
    };

    // G·ªçi h√†m xin quy·ªÅn v√† l·∫•y token khi component mount
    requestPermission();

    // L·∫Øng nghe th√¥ng b√°o khi ·ª©ng d·ª•ng ƒëang m·ªü
    const unsubscribe = onMessage(messaging, (payload) => {
      console.log("üì® Th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c:", payload);

      // Hi·ªÉn th·ªã th√¥ng b√°o ngay l·∫≠p t·ª©c
      if (Notification.permission === "granted") {
        const { title, body } = payload.notification;
        new Notification(title, {
          body,
          icon: "/logo192.png", // ƒë∆∞·ªùng d·∫´n icon
        });
      }
    });

    // D·ªçn d·∫πp listener khi component unmount
    return () => unsubscribe();
  }, []);

  return null; // Component kh√¥ng hi·ªÉn th·ªã g√¨
};

export default PushNotification;

